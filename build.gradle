buildscript {
    repositories {
        maven {
			name 'MixinGradle'
			url 'https://repo.spongepowered.org/repository/maven-public'
		}
        maven { url = 'https://maven.minecraftforge.net' } // old url was 'https://files.minecraftforge.net/maven'
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:5.+'
        classpath group: 'wtf.gofancy.fancygradle', name: 'wtf.gofancy.fancygradle.gradle.plugin', version: '1.1.2-0'
		if (project.use_mixins.toBoolean()) {
			classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
		}
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'wtf.gofancy.fancygradle' version '1.1.+'
}

// apply plugin: 'org.spongepowered.mixin'
if (project.use_mixins.toBoolean()) {
	apply plugin: 'org.spongepowered.mixin'
}

version = project.mod_version
group = project.maven_group
archivesBaseName = project.archives_base_name

java.toolchain.languageVersion = JavaLanguageVersion.of(8)


if (project.use_intellij_idea.toBoolean()) {
	apply {
        plugin 'java'
        plugin 'idea'
    }


    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }
}

if (project.use_eclipse.toBoolean()) {
	apply {
        plugin 'java'
        plugin 'eclipse'
    }


    eclipse {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }
}


minecraft {

    mappings channel: 'stable', version: '39-1.12'

	if (project.has_access_transformer.toBoolean()) {
		accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
	}

    runs {
        client {
            workingDirectory project.file('run')
			if (project.use_coremod.toBoolean()) {
				jvmArg '-Dfml.coreMods.load=' + coremod_plugin_class_name
			}
			if (project.use_mixins.toBoolean()) {
				jvmArg '-Dmixin.hotSwap=true'
				jvmArg '-Dmixin.checks.interfaces=true'
				jvmArg '-Dmixin.debug=true'
			}
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            environment 'MC_VERSION', '1.12.2'
        }

        server {
            workingDirectory project.file('run')
            if (project.use_coremod.toBoolean()) {
				jvmArg '-Dfml.coreMods.load=' + coremod_plugin_class_name
			}
			if (project.use_mixins.toBoolean()) {
				jvmArg '-Dmixin.hotSwap=true'
				jvmArg '-Dmixin.checks.interfaces=true'
			}
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            environment 'MC_VERSION', '1.12.2'
        }
    }
}


repositories {
	maven { 
		url = 'https://maven.cleanroommc.com' 
	}
    maven {
        url = 'https://repo.spongepowered.org/maven'
    }
    maven {
        url = "https://chickenbones.net/maven"
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "http://dvs1.progwml6.com/files/maven"
        allowInsecureProtocol = true
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    flatDir {
        // location for sources
        dirs 'libs'
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'


    if (project.use_mixins.toBoolean()) {
        compileOnly 'zone.rong:mixinbooter:7.0'
        runtimeOnly 'zone.rong:mixinbooter:7.0'

        annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
    }
    implementation fg.deobf("mezz.jei:jei_1.12.2:4.16.1.302")
    implementation fg.deobf("curse.maven:baubles-227083:2518667")
    implementation fg.deobf("codechicken:CodeChickenLib:1.12.2-3.2.3.358:universal")
    implementation fg.deobf("curse.maven:minefantasyreforged-431996:4623363")
    implementation fg.deobf("curse.maven:mysticalmechanics-300742:3006392")
    implementation fg.deobf("curse.maven:embers-rekindled-300777:3695248")
}

fancyGradle {
    patches {
        resources
        coremods
        asm
        codeChickenLib
    }
}

if (project.build_deobfJar.toBoolean()) {
    // Create deobf dev jars
    task deobfJar(type: Jar) {
        archiveClassifier.set("deobf")
        from sourceSets.main.output
    }
}

if (project.build_apiJar.toBoolean()) {
    // Create API library jar
    task apiZip(type: Jar) {
        archiveClassifier.set("api")
        from(sourceSets.main.java) {
            include "name/api/**"
        }
        from(sourceSets.main.output) {
            include "name/api/**"
        }
    }
}

if (project.build_sourceJar.toBoolean()) {
    // Create source jar
    task sourcesJar(type: Jar) {
        archiveClassifier.set("sources")
        from sourceSets.main.allJava
    }
}

// Loading resources, works even on IDE client runs
sourceSets {
    main {
        if (project.use_mixins.toBoolean()) {
            ext.refMap = 'mixins.' + archives_base_name + '.refmap.json'
        }

        java {
            srcDirs = ["src/main/java"]
        }

        resources {
            srcDirs = ["src/main/java", "src/main/resources"]
        }
    }

    test {
        java {
            srcDirs = ["src/test/java"]
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
    }

    // at compile time, put resources in same directories as classes
    main.output.setResourcesDir(main.java.outputDir)
}

jar {
    manifest {
        attributes([
                "Specification-Title": archivesBaseName,
                "Specification-Vendor": "Lenvill",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": archivesBaseName,
                "Implementation-Version": "${mod_version}",
                "Implementation-Vendor" :"Lenvill",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

artifacts {
    if (project.build_deobfJar.toBoolean()) {
        archives deobfJar
    }
    if (project.build_apiJar.toBoolean()) {
        archives apiZip
    }
    if (project.build_sourceJar.toBoolean()) {
        archives sourcesJar
    }
}

jar.finalizedBy('reobfJar')

processResources {
    // required to allow file expansion later
    duplicatesStrategy = 'include'

    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
